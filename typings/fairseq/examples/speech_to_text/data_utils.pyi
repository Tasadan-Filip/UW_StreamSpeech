"""
This type stub file was generated by pyright.
"""

import pandas as pd
import torch
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

def gen_vocab(input_path: Path, output_path_prefix: Path, model_type=..., vocab_size=..., special_symbols: Optional[List[str]] = ...): # -> None:
    ...

def extract_fbank_features(waveform: torch.FloatTensor, sample_rate: int, output_path: Optional[Path] = ..., n_mel_bins: int = ..., overwrite: bool = ...): # -> ndarray[Any, Any] | None:
    ...

def create_zip(data_root: Path, zip_path: Path): # -> None:
    ...

def get_zip_manifest(zip_path: Path, zip_root: Optional[Path] = ..., is_audio=...): # -> tuple[dict[Any, Any], dict[Any, Any]]:
    ...

def gen_config_yaml(manifest_root: Path, spm_filename: Optional[str] = ..., vocab_name: Optional[str] = ..., yaml_filename: str = ..., specaugment_policy: Optional[str] = ..., prepend_tgt_lang_tag: bool = ..., sampling_alpha: Optional[float] = ..., input_channels: Optional[int] = ..., input_feat_per_channel: Optional[int] = ..., audio_root: str = ..., cmvn_type: str = ..., gcmvn_path: Optional[Path] = ..., extra=...): # -> None:
    ...

def load_df_from_tsv(path: Union[str, Path]) -> pd.DataFrame:
    ...

def save_df_to_tsv(dataframe, path: Union[str, Path]): # -> None:
    ...

def load_tsv_to_dicts(path: Union[str, Path]) -> List[dict]:
    ...

def filter_manifest_df(df, is_train_split=..., extra_filters=..., min_n_frames=..., max_n_frames=...):
    ...

def cal_gcmvn_stats(features_list): # -> dict[str, Any]:
    ...

class S2TDataConfigWriter:
    DEFAULT_VOCAB_FILENAME = ...
    DEFAULT_INPUT_FEAT_PER_CHANNEL = ...
    DEFAULT_INPUT_CHANNELS = ...
    def __init__(self, yaml_path: Path) -> None:
        ...
    
    def flush(self): # -> None:
        ...
    
    def set_audio_root(self, audio_root=...): # -> None:
        ...
    
    def set_vocab_filename(self, vocab_filename: str = ...): # -> None:
        ...
    
    def set_specaugment(self, time_wrap_w: int, freq_mask_n: int, freq_mask_f: int, time_mask_n: int, time_mask_t: int, time_mask_p: float): # -> None:
        ...
    
    def set_specaugment_lb_policy(self): # -> None:
        ...
    
    def set_specaugment_ld_policy(self): # -> None:
        ...
    
    def set_specaugment_sm_policy(self): # -> None:
        ...
    
    def set_specaugment_ss_policy(self): # -> None:
        ...
    
    def set_input_channels(self, input_channels: int = ...): # -> None:
        ...
    
    def set_input_feat_per_channel(self, input_feat_per_channel: int = ...): # -> None:
        ...
    
    def set_bpe_tokenizer(self, bpe_tokenizer: Dict[str, Any]): # -> None:
        ...
    
    def set_global_cmvn(self, stats_npz_path: str): # -> None:
        ...
    
    def set_feature_transforms(self, split: str, transforms: List[str]): # -> None:
        ...
    
    def set_prepend_tgt_lang_tag(self, flag: bool = ...): # -> None:
        ...
    
    def set_sampling_alpha(self, sampling_alpha: float = ...): # -> None:
        ...
    
    def set_extra(self, data): # -> None:
        ...
    


