"""
This type stub file was generated by pyright.
"""

from argparse import ArgumentParser, Namespace
from typing import Dict, List, Optional, Tuple
from fairseq.dataclass import FairseqDataclass
from omegaconf import DictConfig

logger = ...
def eval_str_list(x, x_type=...): # -> list[Any] | list[float] | None:
    ...

def interpret_dc_type(field_type): # -> type[str]:
    ...

def gen_parser_from_dataclass(parser: ArgumentParser, dataclass_instance: FairseqDataclass, delete_default: bool = ..., with_prefix: Optional[str] = ...) -> None:
    """
    convert a dataclass instance to tailing parser arguments.

    If `with_prefix` is provided, prefix all the keys in the resulting parser with it. It means that we are
    building a flat namespace from a structured dataclass (see transformer_config.py for example).
    """
    ...

def migrate_registry(name, value, registry, args, overrides, deletes, use_name_as_val=...): # -> None:
    ...

def override_module_args(args: Namespace) -> Tuple[List[str], List[str]]:
    """use the field in args to overrides those in cfg"""
    ...

class omegaconf_no_object_check:
    def __init__(self) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, type, value, traceback): # -> None:
        ...
    


def convert_namespace_to_omegaconf(args: Namespace) -> DictConfig:
    """Convert a flat argparse.Namespace to a structured DictConfig."""
    ...

def overwrite_args_by_name(cfg: DictConfig, overrides: Dict[str, any]): # -> None:
    ...

def merge_with_parent(dc: FairseqDataclass, cfg: DictConfig, remove_missing=...): # -> ListConfig | DictConfig:
    ...

