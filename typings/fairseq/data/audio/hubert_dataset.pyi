"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Optional, Union
from fairseq.data.fairseq_dataset import FairseqDataset

logger = ...
def load_audio(manifest_path, max_keep, min_keep): # -> tuple[str, list[Any], list[Any], int, list[Any]]:
    ...

def load_label(label_path, inds, tot): # -> list[Any]:
    ...

def load_label_offset(label_path, inds, tot): # -> list[tuple[Any, Any]]:
    ...

def verify_label_lengths(audio_sizes, audio_rate, label_path, label_rate, inds, tot, tol=...): # -> None:
    ...

class HubertDataset(FairseqDataset):
    def __init__(self, manifest_path: str, sample_rate: float, label_paths: List[str], label_rates: Union[List[float], float], pad_list: List[str], eos_list: List[str], label_processors: Optional[List[Any]] = ..., max_keep_sample_size: Optional[int] = ..., min_keep_sample_size: Optional[int] = ..., max_sample_size: Optional[int] = ..., shuffle: bool = ..., pad_audio: bool = ..., normalize: bool = ..., store_labels: bool = ..., random_crop: bool = ..., single_target: bool = ...) -> None:
        ...
    
    def get_audio(self, index): # -> Tensor:
        ...
    
    def get_label(self, index, label_idx): # -> Any | str:
        ...
    
    def get_labels(self, index): # -> list[Any | str]:
        ...
    
    def __getitem__(self, index): # -> dict[str, Any | Tensor | list[Any | str]]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def crop_to_max_size(self, wav, target_size): # -> tuple[Any, Literal[0]] | tuple[Any, Any | Literal[0]]:
        ...
    
    def collater(self, samples): # -> dict[Any, Any] | dict[str, LongTensor | dict[str, Any | Tensor]]:
        ...
    
    def collater_audio(self, audios, audio_size): # -> tuple[Any, Tensor, list[int]]:
        ...
    
    def collater_frm_label(self, targets, audio_size, audio_starts, label_rate, pad): # -> tuple[Any, LongTensor, Number]:
        ...
    
    def collater_seq_label(self, targets, pad): # -> tuple[Any, LongTensor, Number]:
        ...
    
    def collater_label(self, targets_by_label, audio_size, audio_starts): # -> tuple[list[Any], list[Any], list[Any]]:
        ...
    
    def num_tokens(self, index): # -> int:
        ...
    
    def size(self, index): # -> int:
        ...
    
    def ordered_indices(self): # -> Any:
        ...
    
    def postprocess(self, wav, cur_sample_rate): # -> Tensor:
        ...
    


