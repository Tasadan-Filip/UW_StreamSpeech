"""
This type stub file was generated by pyright.
"""

import torch
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple
from fairseq.data import Dictionary
from fairseq.data.audio.data_cfg import S2SDataConfig
from fairseq.data.audio.speech_to_text_dataset import SpeechToTextDataset

logger = ...
@dataclass
class SpeechToSpeechDatasetItem:
    index: int
    source: torch.Tensor
    target: Optional[torch.Tensor] = ...
    target_speaker: Optional[torch.Tensor] = ...
    tgt_lang_tag: Optional[int] = ...


class SpeechToSpeechDataset(SpeechToTextDataset):
    def __init__(self, split: str, is_train_split: bool, data_cfg: S2SDataConfig, src_audio_paths: List[str], src_n_frames: List[int], tgt_audio_paths: List[str], tgt_n_frames: List[int], src_langs: Optional[List[str]] = ..., tgt_langs: Optional[List[str]] = ..., ids: Optional[List[str]] = ..., target_is_code: bool = ..., tgt_dict: Dictionary = ..., n_frames_per_step: int = ...) -> None:
        ...
    
    def pack_units(self, input: torch.Tensor) -> torch.Tensor:
        ...
    
    def __getitem__(self, index: int) -> SpeechToSpeechDatasetItem:
        ...
    
    def collater(self, samples: List[SpeechToSpeechDatasetItem], return_order: bool = ...) -> Dict:
        ...
    


class TextTargetMultitaskData:
    def __init__(self, args, split, tgt_dict) -> None:
        ...
    
    def get(self, sample_id): # -> IntTensor:
        ...
    
    def collater(self, samples: List[torch.Tensor]) -> torch.Tensor:
        ...
    


class SpeechToSpeechMultitaskDataset(SpeechToSpeechDataset):
    def __init__(self, *argv) -> None:
        ...
    
    def add_multitask_dataset(self, task_name, task_data): # -> None:
        ...
    
    def __getitem__(self, index: int) -> Tuple[SpeechToSpeechDatasetItem, Dict[str, torch.Tensor]]:
        ...
    
    def collater(self, samples: List[Tuple[SpeechToSpeechDatasetItem, Dict[str, torch.Tensor]]]) -> Dict:
        ...
    


class SpeechToSpeechDatasetCreator:
    DEFAULT_LANG = ...
    @classmethod
    def from_tsv(cls, root: str, data_cfg: S2SDataConfig, splits: str, is_train_split: bool, epoch: int, seed: int, target_is_code: bool = ..., target_dictionary: Dictionary = ..., n_frames_per_step: int = ..., multitask: Optional[Dict] = ...) -> SpeechToSpeechDataset:
        ...
    


