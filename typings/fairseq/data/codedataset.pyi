"""
This type stub file was generated by pyright.
"""

from fairseq.data.fairseq_dataset import FairseqDataset

F0_FRAME_SPACE = ...
logger = ...
class ExpressiveCodeDataConfig:
    def __init__(self, json_path) -> None:
        ...
    
    @property
    def manifests(self): # -> Any:
        ...
    
    @property
    def n_units(self): # -> Any:
        ...
    
    @property
    def sampling_rate(self): # -> Any:
        ...
    
    @property
    def code_hop_size(self): # -> Any:
        ...
    
    @property
    def f0_stats(self): # -> Any:
        """pre-computed f0 statistics path"""
        ...
    
    @property
    def f0_vq_type(self): # -> Any:
        """naive or precomp"""
        ...
    
    @property
    def f0_vq_name(self): # -> Any:
        ...
    
    def get_f0_vq_naive_quantizer(self, log, norm_mean, norm_std): # -> Any:
        ...
    
    @property
    def f0_vq_n_units(self): # -> Any:
        ...
    
    @property
    def multispkr(self): # -> Any:
        """how to parse speaker label from audio path"""
        ...
    


def get_f0(audio, rate=...):
    ...

def interpolate_f0(f0): # -> Tensor:
    ...

def naive_quantize(x, edges):
    ...

def load_wav(full_path): # -> tuple[ndarray[Any, dtype[float64]] | Any, Any]:
    ...

def parse_code(code_str, dictionary, append_eos): # -> tuple[Any, Tensor | Any]:
    ...

def parse_manifest(manifest, dictionary): # -> tuple[list[Any], list[Any], list[Any], list[Any]]:
    ...

def parse_speaker(path, method): # -> str | object:
    ...

def get_f0_by_filename(filename, tgt_sampling_rate): # -> Tensor:
    ...

def align_f0_to_durations(f0, durations, f0_code_ratio, tol=...): # -> Tensor:
    ...

class Paddings:
    def __init__(self, code_val, dur_val=..., f0_val=...) -> None:
        ...
    


class Shifts:
    def __init__(self, shifts_str, pads) -> None:
        ...
    
    @property
    def dur(self): # -> int:
        ...
    
    @property
    def f0(self): # -> int:
        ...
    
    @staticmethod
    def shift_one(seq, left_pad_num, right_pad_num, pad): # -> tuple[Tensor, Tensor]:
        ...
    
    def __call__(self, code, dur, f0): # -> tuple[Any, Tensor, Any, Tensor, Any, Tensor] | tuple[Tensor, Tensor, Tensor, Tensor, Tensor, Tensor]:
        ...
    


class CodeDataset(FairseqDataset):
    def __init__(self, manifest, dictionary, dur_dictionary, f0_dictionary, config, discrete_dur, discrete_f0, log_f0, normalize_f0_mean, normalize_f0_std, interpolate_f0, return_filename=..., strip_filename=..., shifts=..., return_continuous_f0=...) -> None:
        ...
    
    def get_data_handlers(self): # -> None:
        ...
    
    def preprocess_f0(self, f0, stats): # -> Tensor:
        """
        1. interpolate
        2. log transform (keep unvoiced frame 0)
        """
        ...
    
    def __getitem__(self, index): # -> dict[str, Any | Tensor]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def size(self, index): # -> NDArray[signedinteger[Any]]:
        ...
    
    def num_tokens(self, index): # -> NDArray[signedinteger[Any]]:
        ...
    
    def collater(self, samples): # -> dict[Any, Any] | dict[str, int | dict[str, Any | LongTensor] | Any]:
        ...
    


