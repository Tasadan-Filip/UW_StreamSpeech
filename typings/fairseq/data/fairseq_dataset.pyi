"""
This type stub file was generated by pyright.
"""

import torch.utils.data

logger = ...
class EpochListening:
    """Mixin for receiving updates whenever the epoch increments."""
    @property
    def can_reuse_epoch_itr_across_epochs(self): # -> Literal[True]:
        """
        Whether we can reuse the :class:`fairseq.data.EpochBatchIterator` for
        this dataset across epochs.

        This needs to return ``False`` if the sample sizes can change across
        epochs, in which case we may need to regenerate batches at each epoch.
        If your dataset relies in ``set_epoch`` then you should consider setting
        this to ``False``.
        """
        ...
    
    def set_epoch(self, epoch): # -> None:
        """Will receive the updated epoch number at the beginning of the epoch."""
        ...
    


class FairseqDataset(torch.utils.data.Dataset, EpochListening):
    """A dataset that provides helpers for batching."""
    def __getitem__(self, index):
        ...
    
    def __len__(self):
        ...
    
    def collater(self, samples):
        """Merge a list of samples to form a mini-batch.

        Args:
            samples (List[dict]): samples to collate

        Returns:
            dict: a mini-batch suitable for forwarding with a Model
        """
        ...
    
    def num_tokens(self, index):
        """Return the number of tokens in a sample. This value is used to
        enforce ``--max-tokens`` during batching."""
        ...
    
    def num_tokens_vec(self, indices):
        """Return the number of tokens for a set of positions defined by indices.
        This value is used to enforce ``--max-tokens`` during batching."""
        ...
    
    def size(self, index):
        """Return an example's size as a float or tuple. This value is used when
        filtering a dataset with ``--max-positions``."""
        ...
    
    def ordered_indices(self): # -> NDArray[signedinteger[_64Bit]]:
        """Return an ordered list of indices. Batches will be constructed based
        on this order."""
        ...
    
    @property
    def supports_prefetch(self): # -> Literal[False]:
        """Whether this dataset supports prefetching."""
        ...
    
    def attr(self, attr: str, index: int): # -> Any | None:
        ...
    
    def prefetch(self, indices):
        """Prefetch the data required for this epoch."""
        ...
    
    def get_batch_shapes(self): # -> None:
        """
        Return a list of valid batch shapes, for example::

            [(8, 512), (16, 256), (32, 128)]

        The first dimension of each tuple is the batch size and can be ``None``
        to automatically infer the max batch size based on ``--max-tokens``.
        The second dimension of each tuple is the max supported length as given
        by :func:`fairseq.data.FairseqDataset.num_tokens`.

        This will be used by :func:`fairseq.data.FairseqDataset.batch_by_size`
        to restrict batch shapes. This is useful on TPUs to avoid too many
        dynamic shapes (and recompilations).
        """
        ...
    
    def batch_by_size(self, indices, max_tokens=..., max_sentences=..., required_batch_size_multiple=...):
        """
        Given an ordered set of indices, return batches according to
        *max_tokens*, *max_sentences* and *required_batch_size_multiple*.
        """
        ...
    
    def filter_indices_by_size(self, indices, max_sizes): # -> tuple[Any | NDArray[signedinteger[_64Bit]], Any | list[Any]]:
        """
        Filter a list of sample indices. Remove those that are longer than
        specified in *max_sizes*.

        WARNING: don't update, override method in child classes

        Args:
            indices (np.array): original array of sample indices
            max_sizes (int or list[int] or tuple[int]): max sample size,
                can be defined separately for src and tgt (then list or tuple)

        Returns:
            np.array: filtered sample array
            list: list of removed indices
        """
        ...
    
    @property
    def supports_fetch_outside_dataloader(self): # -> Literal[True]:
        """Whether this dataset supports fetching outside the workers of the dataloader."""
        ...
    


class FairseqIterableDataset(torch.utils.data.IterableDataset, EpochListening):
    """
    For datasets that need to be read sequentially, usually because the data is
    being streamed or otherwise can't be manipulated on a single machine.
    """
    def __iter__(self):
        ...
    


