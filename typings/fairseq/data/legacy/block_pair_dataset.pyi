"""
This type stub file was generated by pyright.
"""

from fairseq.data import FairseqDataset

class BlockPairDataset(FairseqDataset):
    """Break a Dataset of tokens into sentence pair blocks for next sentence
       prediction as well as masked language model.

       High-level logics are:
       1. break input tensor to tensor blocks
       2. pair the blocks with 50% next sentence and 50% random sentence
       3. return paired blocks as well as related segment labels

    Args:
        dataset (~torch.utils.data.Dataset): dataset to break into blocks
        sizes: array of sentence lengths
        dictionary: dictionary for the task
        block_size: maximum block size
        break_mode: mode for breaking copurs into block pairs. currently we support
            2 modes
            doc: respect document boundaries and each part of the pair should belong to on document
            none: don't respect any boundary and cut tokens evenly
        short_seq_prob: probability for generating shorter block pairs
        doc_break_size: Size for empty line separating documents. Typically 1 if
                        the sentences have eos, 0 otherwise.
    """
    def __init__(self, dataset, dictionary, sizes, block_size, break_mode=..., short_seq_prob=..., doc_break_size=...) -> None:
        ...
    
    def __getitem__(self, index): # -> tuple[Tensor, Tensor, Any]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    @property
    def supports_prefetch(self): # -> Any | bool:
        ...
    
    def prefetch(self, indices): # -> None:
        ...
    


