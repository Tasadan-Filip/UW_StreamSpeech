"""
This type stub file was generated by pyright.
"""

from . import FairseqDataset

def collate(samples, pad_idx, eos_idx, fixed_pad_length=..., pad_to_bsz=...): # -> dict[Any, Any] | dict[str, LongTensor | int | dict[str, list[Any] | Any | LongTensor] | list[Any] | Any]:
    ...

class MonolingualDataset(FairseqDataset):
    """
    A wrapper around torch.utils.data.Dataset for monolingual data.

    Args:
        dataset (torch.utils.data.Dataset): dataset to wrap
        sizes (List[int]): sentence lengths
        vocab (~fairseq.data.Dictionary): vocabulary
        shuffle (bool, optional): shuffle the elements before batching
            (default: True).
    """
    def __init__(self, dataset, sizes, src_vocab, tgt_vocab=..., add_eos_for_other_targets=..., shuffle=..., targets=..., add_bos_token=..., fixed_pad_length=..., pad_to_bsz=..., src_lang_idx=..., tgt_lang_idx=...) -> None:
        ...
    
    def __getitem__(self, index): # -> dict[str, Any | Tensor]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def num_tokens_vec(self, indices): # -> ndarray[Any, dtype[Any]]:
        """Return the number of tokens for a set of positions defined by indices.
        This value is used to enforce ``--max-tokens`` during batching."""
        ...
    
    def collater(self, samples): # -> dict[Any, Any] | dict[str, LongTensor | int | dict[str, list[Any] | Any | LongTensor] | list[Any] | Any]:
        """Merge a list of samples to form a mini-batch.

        Args:
            samples (List[dict]): samples to collate

        Returns:
            dict: a mini-batch with the following keys:

                - `id` (LongTensor): example IDs in the original input order
                - `ntokens` (int): total number of tokens in the batch
                - `net_input` (dict): the input to the Model, containing keys:

                  - `src_tokens` (LongTensor): a padded 2D Tensor of tokens in
                    the source sentence of shape `(bsz, src_len)`. Padding will
                    appear on the right.

                - `target` (LongTensor): a padded 2D Tensor of tokens in the
                  target sentence of shape `(bsz, tgt_len)`. Padding will appear
                  on the right.
        """
        ...
    
    def num_tokens(self, index): # -> ndarray[Any, dtype[Any]]:
        """Return the number of tokens in a sample. This value is used to
        enforce ``--max-tokens`` during batching."""
        ...
    
    def size(self, index): # -> ndarray[Any, dtype[Any]]:
        """Return an example's size as a float or tuple. This value is used when
        filtering a dataset with ``--max-positions``."""
        ...
    
    def ordered_indices(self): # -> Any:
        """Return an ordered list of indices. Batches will be constructed based
        on this order."""
        ...
    
    @property
    def supports_prefetch(self): # -> Any | bool:
        ...
    
    def prefetch(self, indices): # -> None:
        ...
    


