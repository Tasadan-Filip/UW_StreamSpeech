"""
This type stub file was generated by pyright.
"""

import argparse
from pathlib import Path
from typing import Callable, List, Optional, Union

def get_preprocessing_parser(default_task=...): # -> ArgumentParser:
    ...

def get_training_parser(default_task=...): # -> ArgumentParser:
    ...

def get_generation_parser(interactive=..., default_task=...): # -> ArgumentParser:
    ...

def get_speech_generation_parser(default_task=...): # -> ArgumentParser:
    ...

def get_interactive_generation_parser(default_task=...): # -> ArgumentParser:
    ...

def get_eval_lm_parser(default_task=...): # -> ArgumentParser:
    ...

def get_validation_parser(default_task=...): # -> ArgumentParser:
    ...

def parse_args_and_arch(parser: argparse.ArgumentParser, input_args: List[str] = ..., parse_known: bool = ..., suppress_defaults: bool = ..., modify_parser: Optional[Callable[[argparse.ArgumentParser], None]] = ...): # -> Namespace | tuple[Namespace, list[str] | None]:
    """
    Args:
        parser (ArgumentParser): the parser
        input_args (List[str]): strings to parse, defaults to sys.argv
        parse_known (bool): only parse known arguments, similar to
            `ArgumentParser.parse_known_args`
        suppress_defaults (bool): parse while ignoring all default values
        modify_parser (Optional[Callable[[ArgumentParser], None]]):
            function to modify the parser, e.g., to set default values
    """
    ...

def get_parser(desc, default_task=...): # -> ArgumentParser:
    ...

def add_preprocess_args(parser):
    ...

def add_dataset_args(parser, train=..., gen=...):
    ...

def add_distributed_training_args(parser, default_world_size=...):
    ...

def add_optimization_args(parser):
    ...

def add_checkpoint_args(parser):
    ...

def add_common_eval_args(group): # -> None:
    ...

def add_eval_lm_args(parser): # -> None:
    ...

def add_generation_args(parser):
    ...

def add_speech_generation_args(parser):
    ...

def add_interactive_args(parser): # -> None:
    ...

def add_model_args(parser):
    ...

def get_args(data: Union[str, Path], task: str = ..., arch: str = ..., **overrides): # -> Namespace | tuple[Namespace, list[str] | None]:
    ...

def add_ema_args(parser): # -> None:
    ...

