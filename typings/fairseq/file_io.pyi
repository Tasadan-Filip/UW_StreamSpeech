"""
This type stub file was generated by pyright.
"""

from typing import List, Optional

logger = ...
class PathManager:
    """
    Wrapper for insulating OSS I/O (using Python builtin operations) from
    iopath's PathManager abstraction (for transparently handling various
    internal backends).
    """
    @staticmethod
    def open(path: str, mode: str = ..., buffering: int = ..., encoding: Optional[str] = ..., errors: Optional[str] = ..., newline: Optional[str] = ...): # -> IO[Any]:
        ...
    
    @staticmethod
    def copy(src_path: str, dst_path: str, overwrite: bool = ...) -> bool:
        ...
    
    @staticmethod
    def get_local_path(path: str, **kwargs) -> str:
        ...
    
    @staticmethod
    def exists(path: str) -> bool:
        ...
    
    @staticmethod
    def isfile(path: str) -> bool:
        ...
    
    @staticmethod
    def ls(path: str) -> List[str]:
        ...
    
    @staticmethod
    def mkdirs(path: str) -> None:
        ...
    
    @staticmethod
    def rm(path: str) -> None:
        ...
    
    @staticmethod
    def chmod(path: str, mode: int) -> None:
        ...
    
    @staticmethod
    def register_handler(handler) -> None:
        ...
    
    @staticmethod
    def copy_from_local(local_path: str, dst_path: str, overwrite: bool = ..., **kwargs) -> None:
        ...
    
    @staticmethod
    def path_requires_pathmanager(path: str) -> bool:
        """Do we require PathManager to access given path?"""
        ...
    
    @staticmethod
    def supports_rename(path: str) -> bool:
        ...
    
    @staticmethod
    def rename(src: str, dst: str): # -> None:
        ...
    
    @staticmethod
    def opena(path: str, mode: str = ..., buffering: int = ..., encoding: Optional[str] = ..., errors: Optional[str] = ..., newline: Optional[str] = ...):
        """
        Return file descriptor with asynchronous write operations.
        """
        ...
    
    @staticmethod
    def async_close() -> bool:
        """
        Wait for files to be written and clean up asynchronous PathManager.
        NOTE: `PathManager.async_close()` must be called at the end of any
        script that uses `PathManager.opena(...)`.
        """
        ...
    


