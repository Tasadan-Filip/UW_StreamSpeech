"""
This type stub file was generated by pyright.
"""

from fairseq.criterions import register_criterion
from fairseq.criterions.label_smoothed_cross_entropy_with_rdrop import RdropLabelSmoothedCrossEntropyCriterion, RdropLabelSmoothedCrossEntropyCriterionConfig
from fairseq.criterions.tacotron2_loss import Tacotron2Criterion, Tacotron2CriterionConfig

logger = ...
class MultitaskCriterion:
    def __init__(self, multitask_tasks, rdrop_alpha=...) -> None:
        ...
    
    def set_multitask_loss_weight(self, task_name, weight=...): # -> None:
        ...
    
    def get_multitask_loss(self, model, sample, model_out): # -> tuple[float | Any, dict[Any, Any]]:
        ...
    
    @classmethod
    def reduce_metrics(cls, logging_outputs) -> None:
        ...
    


@register_criterion("speech_to_unit", dataclass=RdropLabelSmoothedCrossEntropyCriterionConfig)
class SpeechToUnitMultitaskTaskCriterion(RdropLabelSmoothedCrossEntropyCriterion, MultitaskCriterion):
    def __init__(self, task, sentence_avg, label_smoothing, ignore_prefix_size=..., report_accuracy=..., rdrop_alpha=...) -> None:
        ...
    
    def forward(self, model, sample, reduce=...): # -> tuple[Any, Any, dict[str, Any]]:
        ...
    
    @classmethod
    def reduce_metrics(cls, logging_outputs) -> None:
        ...
    
    @staticmethod
    def logging_outputs_can_be_summed() -> bool:
        """
        Whether the logging outputs returned by `forward` can be summed
        across workers prior to calling `reduce_metrics`. Setting this
        to True will improves distributed training speed.
        """
        ...
    


@register_criterion("speech_to_unit_2pass", dataclass=RdropLabelSmoothedCrossEntropyCriterionConfig)
class SpeechToUnit2passMultitaskTaskCriterion(SpeechToUnitMultitaskTaskCriterion):
    def __init__(self, task, sentence_avg, label_smoothing, ignore_prefix_size=..., report_accuracy=..., rdrop_alpha=...) -> None:
        ...
    
    def forward(self, model, sample, reduce=...): # -> tuple[Any, Any, dict[str, Any]]:
        ...
    


@register_criterion("speech_to_spectrogram", dataclass=Tacotron2CriterionConfig)
class SpeechToSpectrogramMultitaskTaskCriterion(Tacotron2Criterion, MultitaskCriterion):
    def __init__(self, task, sentence_avg, use_guided_attention_loss, guided_attention_loss_sigma, bce_pos_weight, ctc_weight) -> None:
        ...
    
    def forward(self, model, sample, reduction=...): # -> tuple[Any | Tensor, Any, dict[str, Number | Tensor | Any]]:
        ...
    
    @classmethod
    def reduce_metrics(cls, logging_outputs) -> None:
        ...
    


@register_criterion("speech_to_spectrogram_2pass", dataclass=Tacotron2CriterionConfig)
class SpeechToSpectrogram2passMultitaskTaskCriterion(SpeechToSpectrogramMultitaskTaskCriterion):
    def __init__(self, task, sentence_avg, use_guided_attention_loss, guided_attention_loss_sigma, bce_pos_weight, ctc_weight) -> None:
        ...
    
    def forward(self, model, sample, reduction=...): # -> tuple[Any | Tensor, Any, dict[str, Number | Tensor | Any]]:
        ...
    


