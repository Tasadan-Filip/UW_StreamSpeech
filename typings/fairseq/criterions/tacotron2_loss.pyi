"""
This type stub file was generated by pyright.
"""

import torch
from dataclasses import dataclass
from typing import Any, Dict, List
from fairseq.criterions import FairseqCriterion, register_criterion
from fairseq.dataclass import FairseqDataclass

logger = ...
@dataclass
class Tacotron2CriterionConfig(FairseqDataclass):
    bce_pos_weight: float = ...
    use_guided_attention_loss: bool = ...
    guided_attention_loss_sigma: float = ...
    ctc_weight: float = ...
    sentence_avg: bool = ...


class GuidedAttentionLoss(torch.nn.Module):
    """
    Efficiently Trainable Text-to-Speech System Based on Deep Convolutional
    Networks with Guided Attention (https://arxiv.org/abs/1710.08969)
    """
    def __init__(self, sigma) -> None:
        ...
    
    def forward(self, attn, src_lens, tgt_lens, reduction=...): # -> Tensor:
        ...
    


@register_criterion("tacotron2", dataclass=Tacotron2CriterionConfig)
class Tacotron2Criterion(FairseqCriterion):
    def __init__(self, task, sentence_avg, use_guided_attention_loss, guided_attention_loss_sigma, bce_pos_weight, ctc_weight) -> None:
        ...
    
    def forward(self, model, sample, reduction=...): # -> tuple[Any | Tensor, Any, dict[str, Number | Tensor | Any]]:
        ...
    
    def compute_loss(self, feat_out, feat_out_post, eos_out, feat_tgt, eos_tgt, tgt_lens, reduction=...): # -> tuple[Tensor, Tensor, Tensor]:
        ...
    
    @classmethod
    def reduce_metrics(cls, logging_outputs: List[Dict[str, Any]]) -> None:
        ...
    
    @staticmethod
    def logging_outputs_can_be_summed() -> bool:
        ...
    


