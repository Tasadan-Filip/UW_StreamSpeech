"""
This type stub file was generated by pyright.
"""

class EM:
    """
    EM algorithm used to quantize the columns of W to minimize

                         ||W - W_hat||^2

    Args:
        - W: weight matrix of size (in_features x out_features)
        - n_iter: number of k-means iterations
        - n_centroids: number of centroids (size of codebook)
        - eps: for cluster reassignment when an empty cluster is found
        - max_tentatives for cluster reassignment when an empty cluster is found
        - verbose: print error after each iteration

    Remarks:
        - If one cluster is empty, the most populated cluster is split into
          two clusters
        - All the relevant dimensions are specified in the code
    """
    def __init__(self, W, n_centroids=..., n_iter=..., eps=..., max_tentatives=..., verbose=...) -> None:
        ...
    
    def initialize_centroids(self): # -> None:
        """
        Initializes the centroids by sampling random columns from W.
        """
        ...
    
    def step(self, i): # -> None:
        """
        There are two standard steps for each iteration: expectation (E) and
        minimization (M). The E-step (assignment) is performed with an exhaustive
        search and the M-step (centroid computation) is performed with
        the exact solution.

        Args:
            - i: step number

        Remarks:
            - The E-step heavily uses PyTorch broadcasting to speed up computations
              and reduce the memory overhead
        """
        ...
    
    def resolve_empty_clusters(self): # -> int:
        """
        If one cluster is empty, the most populated cluster is split into
        two clusters by shifting the respective centroids. This is done
        iteratively for a fixed number of tentatives.
        """
        ...
    
    def compute_distances(self): # -> Tensor:
        """
        For every centroid m, computes

                          ||M - m[None, :]||_2

        Remarks:
            - We rely on PyTorch's broadcasting to speed up computations
              and reduce the memory overhead
            - Without chunking, the sizes in the broadcasting are modified as:
              (n_centroids x n_samples x out_features) -> (n_centroids x out_features)
            - The broadcasting computation is automatically chunked so that
              the tensors fit into the memory of the GPU
        """
        ...
    
    def assign(self): # -> None:
        """
        Assigns each column of W to its closest centroid, thus essentially
        performing the E-step in train().

        Remarks:
            - The function must be called after train() or after loading
              centroids using self.load(), otherwise it will return empty tensors
        """
        ...
    
    def save(self, path, layer): # -> None:
        """
        Saves centroids and assignments.

        Args:
            - path: folder used to save centroids and assignments
        """
        ...
    
    def load(self, path, layer): # -> None:
        """
        Loads centroids and assignments from a given path

        Args:
            - path: folder use to load centroids and assignments
        """
        ...
    


class EmptyClusterResolveError(Exception):
    ...


