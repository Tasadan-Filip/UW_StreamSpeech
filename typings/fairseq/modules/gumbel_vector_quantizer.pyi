"""
This type stub file was generated by pyright.
"""

import torch.nn as nn

class GumbelVectorQuantizer(nn.Module):
    def __init__(self, dim, num_vars, temp, groups, combine_groups, vq_dim, time_first, activation=..., weight_proj_depth=..., weight_proj_factor=...) -> None:
        """Vector quantization using gumbel softmax

        Args:
            dim: input dimension (channels)
            num_vars: number of quantized vectors per group
            temp: temperature for training. this should be a tuple of 3 elements: (start, stop, decay factor)
            groups: number of groups for vector quantization
            combine_groups: whether to use the vectors for all groups
            vq_dim: dimensionality of the resulting quantized vector
            time_first: if true, expect input in BxTxC format, otherwise in BxCxT
            activation: what activation to use (should be a module). this is only used if weight_proj_depth is > 1
            weight_proj_depth: number of layers (with activation in between) to project input before computing logits
            weight_proj_factor: this is used only if weight_proj_depth is > 1. scales the inner dimensionality of
                                projections by this factor
        """
        ...
    
    def set_num_updates(self, num_updates): # -> None:
        ...
    
    def get_codebook_indices(self): # -> Tensor:
        ...
    
    def codebook(self): # -> Tensor:
        ...
    
    def sample_from_codebook(self, b, n): # -> Tensor:
        ...
    
    def to_codebook_index(self, indices):
        ...
    
    def forward_idx(self, x): # -> tuple[Any, Any]:
        ...
    
    def forward(self, x, produce_targets=...): # -> dict[str, Any]:
        ...
    


