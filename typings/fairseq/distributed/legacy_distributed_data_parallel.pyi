"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from torch import nn

"""
A modified version of the legacy DistributedDataParallel module that uses c10d
communication primitives. This version is simpler than the latest PyTorch
version and is useful for debugging. Notably it does not overlap gradient
communication with the backward pass, which makes it slower but more robust
than the PyTorch version.

This version also supports the *no_sync* context manager, which allows faster
training with `--update-freq`.
"""
class LegacyDistributedDataParallel(nn.Module):
    """Implements distributed data parallelism at the module level.

    A simplified version of :class:`torch.nn.parallel.DistributedDataParallel`.
    This version uses a c10d process group for communication and does not
    broadcast buffers.

    Args:
        module (~torch.nn.Module): module to be parallelized
        process_group: the c10d process group to be used for distributed data
            parallel all-reduction.
        buffer_size (int, optional): number of elements to buffer before
            performing all-reduce (default: 256M).
    """
    def __init__(self, module, process_group, buffer_size=...) -> None:
        ...
    
    @contextmanager
    def no_sync(self): # -> Generator[None, Any, None]:
        """A context manager to disable gradient synchronization."""
        ...
    
    def forward(self, *inputs, **kwargs):
        ...
    
    def all_reduce_grads(self): # -> None:
        """
        This function must be called explicitly after backward to reduce
        gradients. There is no automatic hook like c10d.
        """
        ...
    


