"""
This type stub file was generated by pyright.
"""

import functools
from contextlib import contextmanager
from typing import Optional

"""
Wrapper around various loggers and progress bars (e.g., tqdm).
"""
logger = ...
def progress_bar(iterator, log_format: Optional[str] = ..., log_interval: int = ..., log_file: Optional[str] = ..., epoch: Optional[int] = ..., prefix: Optional[str] = ..., aim_repo: Optional[str] = ..., aim_run_hash: Optional[str] = ..., aim_param_checkpoint_dir: Optional[str] = ..., tensorboard_logdir: Optional[str] = ..., default_log_format: str = ..., wandb_project: Optional[str] = ..., wandb_run_name: Optional[str] = ..., azureml_logging: Optional[bool] = ...): # -> AzureMLProgressBarWrapper | WandBProgressBarWrapper | TensorboardProgressBarWrapper | AimProgressBarWrapper | JsonProgressBar | NoopProgressBar | SimpleProgressBar | TqdmProgressBar:
    ...

def build_progress_bar(args, iterator, epoch: Optional[int] = ..., prefix: Optional[str] = ..., default: str = ..., no_progress_bar: str = ...): # -> AzureMLProgressBarWrapper | WandBProgressBarWrapper | TensorboardProgressBarWrapper | AimProgressBarWrapper | JsonProgressBar | NoopProgressBar | SimpleProgressBar | TqdmProgressBar:
    """Legacy wrapper that takes an argparse.Namespace."""
    ...

def format_stat(stat): # -> str:
    ...

class BaseProgressBar:
    """Abstract class for progress bars."""
    def __init__(self, iterable, epoch=..., prefix=...) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, *exc): # -> Literal[False]:
        ...
    
    def __iter__(self):
        ...
    
    def log(self, stats, tag=..., step=...):
        """Log intermediate stats according to log_interval."""
        ...
    
    def print(self, stats, tag=..., step=...):
        """Print end-of-epoch stats."""
        ...
    
    def update_config(self, config): # -> None:
        """Log latest configuration."""
        ...
    


@contextmanager
def rename_logger(logger, new_name): # -> Generator[Any, Any, None]:
    ...

class JsonProgressBar(BaseProgressBar):
    """Log output in JSON format."""
    def __init__(self, iterable, epoch=..., prefix=..., log_interval=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def log(self, stats, tag=..., step=...): # -> None:
        """Log intermediate stats according to log_interval."""
        ...
    
    def print(self, stats, tag=..., step=...): # -> None:
        """Print end-of-epoch stats."""
        ...
    


class NoopProgressBar(BaseProgressBar):
    """No logging."""
    def __init__(self, iterable, epoch=..., prefix=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def log(self, stats, tag=..., step=...): # -> None:
        """Log intermediate stats according to log_interval."""
        ...
    
    def print(self, stats, tag=..., step=...): # -> None:
        """Print end-of-epoch stats."""
        ...
    


class SimpleProgressBar(BaseProgressBar):
    """A minimal logger for non-TTY environments."""
    def __init__(self, iterable, epoch=..., prefix=..., log_interval=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def log(self, stats, tag=..., step=...): # -> None:
        """Log intermediate stats according to log_interval."""
        ...
    
    def print(self, stats, tag=..., step=...): # -> None:
        """Print end-of-epoch stats."""
        ...
    


class TqdmProgressBar(BaseProgressBar):
    """Log to tqdm."""
    def __init__(self, iterable, epoch=..., prefix=...) -> None:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def log(self, stats, tag=..., step=...): # -> None:
        """Log intermediate stats according to log_interval."""
        ...
    
    def print(self, stats, tag=..., step=...): # -> None:
        """Print end-of-epoch stats."""
        ...
    


@functools.lru_cache()
def get_aim_run(repo, run_hash):
    ...

class AimProgressBarWrapper(BaseProgressBar):
    """Log to Aim."""
    def __init__(self, wrapped_bar, aim_repo, aim_run_hash, aim_param_checkpoint_dir) -> None:
        ...
    
    def __iter__(self):
        ...
    
    def log(self, stats, tag=..., step=...): # -> None:
        """Log intermediate stats to Aim."""
        ...
    
    def print(self, stats, tag=..., step=...): # -> None:
        """Print end-of-epoch stats."""
        ...
    
    def update_config(self, config): # -> None:
        """Log latest configuration."""
        ...
    


_tensorboard_writers = ...
class TensorboardProgressBarWrapper(BaseProgressBar):
    """Log to tensorboard."""
    def __init__(self, wrapped_bar, tensorboard_logdir) -> None:
        ...
    
    def __iter__(self):
        ...
    
    def log(self, stats, tag=..., step=...): # -> None:
        """Log intermediate stats to tensorboard."""
        ...
    
    def print(self, stats, tag=..., step=...): # -> None:
        """Print end-of-epoch stats."""
        ...
    
    def update_config(self, config): # -> None:
        """Log latest configuration."""
        ...
    


class WandBProgressBarWrapper(BaseProgressBar):
    """Log to Weights & Biases."""
    def __init__(self, wrapped_bar, wandb_project, run_name=...) -> None:
        ...
    
    def __iter__(self):
        ...
    
    def log(self, stats, tag=..., step=...): # -> None:
        """Log intermediate stats to tensorboard."""
        ...
    
    def print(self, stats, tag=..., step=...): # -> None:
        """Print end-of-epoch stats."""
        ...
    
    def update_config(self, config): # -> None:
        """Log latest configuration."""
        ...
    


class AzureMLProgressBarWrapper(BaseProgressBar):
    """Log to Azure ML"""
    def __init__(self, wrapped_bar) -> None:
        ...
    
    def __exit__(self, *exc): # -> Literal[False]:
        ...
    
    def __iter__(self):
        ...
    
    def log(self, stats, tag=..., step=...): # -> None:
        """Log intermediate stats to AzureML"""
        ...
    
    def print(self, stats, tag=..., step=...): # -> None:
        """Print end-of-epoch stats"""
        ...
    
    def update_config(self, config): # -> None:
        """Log latest configuration."""
        ...
    


