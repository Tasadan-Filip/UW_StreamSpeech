"""
This type stub file was generated by pyright.
"""

from collections import OrderedDict
from typing import Dict, Optional

def type_as(a, b):
    ...

class Meter:
    """Base class for Meters."""
    def __init__(self) -> None:
        ...
    
    def state_dict(self): # -> dict[Any, Any]:
        ...
    
    def load_state_dict(self, state_dict): # -> None:
        ...
    
    def reset(self):
        ...
    
    @property
    def smoothed_value(self) -> float:
        """Smoothed value used for logging."""
        ...
    


def safe_round(number, ndigits):
    ...

class AverageMeter(Meter):
    """Computes and stores the average and current value"""
    def __init__(self, round: Optional[int] = ...) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def update(self, val, n=...): # -> None:
        ...
    
    def state_dict(self): # -> dict[str, Any | int | None]:
        ...
    
    def load_state_dict(self, state_dict): # -> None:
        ...
    
    @property
    def avg(self): # -> float | None:
        ...
    
    @property
    def smoothed_value(self) -> float:
        ...
    


class SumMeter(Meter):
    """Computes and stores the sum"""
    def __init__(self, round: Optional[int] = ...) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def update(self, val): # -> None:
        ...
    
    def state_dict(self): # -> dict[str, int | Any | None]:
        ...
    
    def load_state_dict(self, state_dict): # -> None:
        ...
    
    @property
    def smoothed_value(self) -> float:
        ...
    


class TimeMeter(Meter):
    """Computes the average occurrence of some event per second"""
    def __init__(self, init: int = ..., n: int = ..., round: Optional[int] = ...) -> None:
        ...
    
    def reset(self, init=..., n=...): # -> None:
        ...
    
    def update(self, val=...): # -> None:
        ...
    
    def state_dict(self): # -> dict[str, float | int | Any | None]:
        ...
    
    def load_state_dict(self, state_dict): # -> None:
        ...
    
    @property
    def avg(self): # -> float:
        ...
    
    @property
    def elapsed_time(self): # -> float:
        ...
    
    @property
    def smoothed_value(self) -> float:
        ...
    


class StopwatchMeter(Meter):
    """Computes the sum/avg duration of some event in seconds"""
    def __init__(self, round: Optional[int] = ...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self, n=..., prehook=...): # -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def state_dict(self): # -> dict[str, int | float | Any | None]:
        ...
    
    def load_state_dict(self, state_dict): # -> None:
        ...
    
    @property
    def avg(self): # -> float | int:
        ...
    
    @property
    def elapsed_time(self): # -> float:
        ...
    
    @property
    def smoothed_value(self) -> float:
        ...
    


class MetersDict(OrderedDict):
    """A sorted dictionary of :class:`Meters`.

    Meters are sorted according to a priority that is given when the
    meter is first added to the dictionary.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def add_meter(self, key, meter, priority): # -> None:
        ...
    
    def state_dict(self): # -> list[tuple[Any, Any, Any, Any]]:
        ...
    
    def load_state_dict(self, state_dict): # -> None:
        ...
    
    def get_smoothed_value(self, key: str) -> float:
        """Get a single smoothed value."""
        ...
    
    def get_smoothed_values(self) -> Dict[str, float]:
        """Get all smoothed values."""
        ...
    
    def reset(self): # -> None:
        """Reset Meter instances."""
        ...
    
    class _DerivedMeter(Meter):
        """A Meter whose values are derived from other Meters."""
        def __init__(self, fn) -> None:
            ...
        
        def reset(self): # -> None:
            ...
        
    
    


