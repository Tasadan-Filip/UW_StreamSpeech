"""
This type stub file was generated by pyright.
"""

from fairseq.models.speech_to_text.s2t_transformer import S2TTransformerModel
from fairseq.models import FairseqEncoder, register_model, register_model_architecture

logger = ...
class S2TConformerEncoder(FairseqEncoder):
    """Conformer Encoder for speech translation based on https://arxiv.org/abs/2005.08100"""
    def __init__(self, args) -> None:
        ...
    
    def forward(self, src_tokens, src_lengths, return_all_hiddens=...): # -> dict[str, list[Any]]:
        """
        Args:
            src_tokens: Input source tokens Tensor of shape B X T X C
            src_lengths: Lengths Tensor corresponding to input source tokens
            return_all_hiddens: If true will append the self attention states to the encoder states
        Returns:
            encoder_out: Tensor of shape B X T X C
            encoder_padding_mask: Optional Tensor with mask
            encoder_embedding: Optional Tensor. Always empty here
            encoder_states: List of Optional Tensors wih self attention states
            src_tokens: Optional Tensor. Always empty here
            src_lengths: Optional Tensor. Always empty here
        """
        ...
    
    def reorder_encoder_out(self, encoder_out, new_order): # -> dict[str, list[Any] | Any]:
        """Required method for a FairseqEncoder. Calls the method from the parent class"""
        ...
    


@register_model("s2t_conformer")
class S2TConformerModel(S2TTransformerModel):
    def __init__(self, encoder, decoder) -> None:
        ...
    
    @staticmethod
    def add_args(parser): # -> None:
        ...
    
    @classmethod
    def build_encoder(cls, args): # -> S2TConformerEncoder:
        ...
    


@register_model_architecture("s2t_conformer", "s2t_conformer")
def base_architecture(args): # -> None:
    ...

