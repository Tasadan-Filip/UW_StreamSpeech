"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional
from torch import Tensor
from fairseq.models.transformer.transformer_decoder import TransformerDecoderBase

class AugTransformerDecoderBase(TransformerDecoderBase):
    """
    Transformer decoder augmented with an additional cross-attention. Each layer
    is a :class:`AugTransformerDecoderLayerBase`.

    Args:
        cfg (argparse.Namespace): parsed command-line arguments
        dictionary (~fairseq.data.Dictionary): decoding dictionary
        embed_tokens (torch.nn.Embedding): output embedding
        encoder_attn_merge_type (str, optional): the way to combine outputs from
            two cross-attention modules. If "sequential" is set, two cross-attention
            modules are stacked sequentially. If "parallel" is set, they are processed
            in parallel and combined before feeding it to FFN (default: sequential).
        dropnet_ratio (float, optional): a probability to drop each cross-attention
            module during training (default: 0.0).
    """
    def __init__(self, cfg, dictionary, embed_tokens, output_projection=..., encoder_attn_merge_type=..., dropnet_ratio=...) -> None:
        ...
    
    def build_decoder_layer(self, cfg, encoder_attn_merge_type=..., dropnet_ratio=...):
        ...
    
    def forward(self, prev_output_tokens, encoder_out: Optional[Dict[str, List[Tensor]]] = ..., encoder_out_aug: Optional[Dict[str, List[Tensor]]] = ..., incremental_state: Optional[Dict[str, Dict[str, Optional[Tensor]]]] = ..., features_only: bool = ..., full_context_alignment: bool = ..., alignment_layer: Optional[int] = ..., alignment_heads: Optional[int] = ..., src_lengths: Optional[Any] = ..., return_all_hiddens: bool = ...): # -> tuple[Any, dict[str, list[Tensor | None]]]:
        """
        Args:
            prev_output_tokens (LongTensor): previous decoder outputs of shape
                `(batch, tgt_len)`, for teacher forcing
            encoder_out (optional): output from the encoder, used for
                encoder-side attention, should be of size T x B x C
            incremental_state (dict): dictionary used for storing state during
                :ref:`Incremental decoding`
            features_only (bool, optional): only return features without
                applying output layer (default: False).
            full_context_alignment (bool, optional): don't apply
                auto-regressive mask to self-attention (default: False).

        Returns:
            tuple:
                - the decoder's output of shape `(batch, tgt_len, vocab)`
                - a dictionary with any model-specific outputs
        """
        ...
    
    def extract_features(self, prev_output_tokens, encoder_out: Optional[Dict[str, List[Tensor]]], encoder_out_aug: Optional[Dict[str, List[Tensor]]], incremental_state: Optional[Dict[str, Dict[str, Optional[Tensor]]]] = ..., full_context_alignment: bool = ..., alignment_layer: Optional[int] = ..., alignment_heads: Optional[int] = ...): # -> tuple[Any, dict[str, list[Tensor | None]]]:
        ...
    
    def extract_features_scriptable(self, prev_output_tokens, encoder_out: Optional[Dict[str, List[Tensor]]], encoder_out_aug: Optional[Dict[str, List[Tensor]]], incremental_state: Optional[Dict[str, Dict[str, Optional[Tensor]]]] = ..., full_context_alignment: bool = ..., alignment_layer: Optional[int] = ..., alignment_heads: Optional[int] = ...): # -> tuple[Any, dict[str, list[Tensor | None]]]:
        """
        Similar to *forward* but only return features.

        Includes several features from "Jointly Learning to Align and
        Translate with Transformer Models" (Garg et al., EMNLP 2019).

        Args:
            full_context_alignment (bool, optional): don't apply
                auto-regressive mask to self-attention (default: False).
            alignment_layer (int, optional): return mean alignment over
                heads at this layer (default: last layer).
            alignment_heads (int, optional): only average alignment over
                this many heads (default: all heads).

        Returns:
            tuple:
                - the decoder's features of shape `(batch, tgt_len, embed_dim)`
                - a dictionary with any model-specific outputs
        """
        ...
    
    def upgrade_state_dict_named(self, state_dict, name):
        """Upgrade a (possibly old) state dict for new versions of fairseq."""
        ...
    


class AugTransformerDecoder(AugTransformerDecoderBase):
    def __init__(self, args, dictionary, embed_tokens, output_projection=...) -> None:
        ...
    
    def build_output_projection(self, args, dictionary, embed_tokens): # -> None:
        ...
    
    def build_decoder_layer(self, args, encoder_attn_merge_type=..., dropnet_ratio=...):
        ...
    


