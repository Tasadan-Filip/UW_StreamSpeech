"""
This type stub file was generated by pyright.
"""

import torch
from typing import Dict, List, Optional, Tuple
from torch import Tensor
from fairseq.models import FairseqEncoderDecoderModel

class TransformerModelBase(FairseqEncoderDecoderModel):
    """
    Transformer model from `"Attention Is All You Need" (Vaswani, et al, 2017)
    <https://arxiv.org/abs/1706.03762>`_.

    Args:
        encoder (TransformerEncoder): the encoder
        decoder (TransformerDecoder): the decoder

    The Transformer model provides the following named architectures and
    command-line arguments:

    .. argparse::
        :ref: fairseq.models.transformer_parser
        :prog:
    """
    def __init__(self, cfg, encoder, decoder) -> None:
        ...
    
    @classmethod
    def add_args(cls, parser): # -> None:
        """Add model-specific arguments to the parser."""
        ...
    
    @classmethod
    def build_model(cls, cfg, task): # -> Self:
        """Build a new model instance."""
        ...
    
    @classmethod
    def build_embedding(cls, cfg, dictionary, embed_dim, path=...): # -> Embedding:
        ...
    
    @classmethod
    def build_encoder(cls, cfg, src_dict, embed_tokens): # -> TransformerEncoderBase:
        ...
    
    @classmethod
    def build_decoder(cls, cfg, tgt_dict, embed_tokens): # -> TransformerDecoderBase:
        ...
    
    def forward(self, src_tokens, src_lengths, prev_output_tokens, return_all_hiddens: bool = ..., features_only: bool = ..., alignment_layer: Optional[int] = ..., alignment_heads: Optional[int] = ...):
        """
        Run the forward pass for an encoder-decoder model.

        Copied from the base class, but without ``**kwargs``,
        which are not supported by TorchScript.
        """
        ...
    
    @torch.jit.export
    def get_normalized_probs(self, net_output: Tuple[Tensor, Optional[Dict[str, List[Optional[Tensor]]]]], log_probs: bool, sample: Optional[Dict[str, Tensor]] = ...): # -> Any | Tensor:
        """Get normalized probabilities (or log probs) from a net's output."""
        ...
    


def Embedding(num_embeddings, embedding_dim, padding_idx): # -> Embedding:
    ...

