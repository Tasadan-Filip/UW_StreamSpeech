"""
This type stub file was generated by pyright.
"""

from fairseq.models import register_model, register_model_architecture
from fairseq.models.transformer.transformer_base import TransformerModelBase

@register_model("transformer")
class TransformerModel(TransformerModelBase):
    """
    This is the legacy implementation of the transformer model that
    uses argparse for configuration.
    """
    @classmethod
    def hub_models(cls): # -> dict[str, dict[str, str] | str]:
        ...
    
    def __init__(self, args, encoder, decoder) -> None:
        ...
    
    @classmethod
    def add_args(cls, parser): # -> None:
        """Add model-specific arguments to the parser."""
        ...
    
    @classmethod
    def build_model(cls, args, task): # -> Self:
        """Build a new model instance."""
        ...
    
    @classmethod
    def build_embedding(cls, args, dictionary, embed_dim, path=...): # -> Embedding:
        ...
    
    @classmethod
    def build_encoder(cls, args, src_dict, embed_tokens): # -> TransformerEncoderBase:
        ...
    
    @classmethod
    def build_decoder(cls, args, tgt_dict, embed_tokens): # -> TransformerDecoderBase:
        ...
    


@register_model_architecture("transformer", "transformer_tiny")
def tiny_architecture(args): # -> object:
    ...

@register_model_architecture("transformer", "transformer")
def base_architecture(args): # -> None:
    ...

@register_model_architecture("transformer", "transformer_iwslt_de_en")
def transformer_iwslt_de_en(args): # -> None:
    ...

@register_model_architecture("transformer", "transformer_wmt_en_de")
def transformer_wmt_en_de(args): # -> None:
    ...

@register_model_architecture("transformer", "transformer_vaswani_wmt_en_de_big")
def transformer_vaswani_wmt_en_de_big(args): # -> None:
    ...

@register_model_architecture("transformer", "transformer_vaswani_wmt_en_fr_big")
def transformer_vaswani_wmt_en_fr_big(args): # -> None:
    ...

@register_model_architecture("transformer", "transformer_wmt_en_de_big")
def transformer_wmt_en_de_big(args): # -> None:
    ...

@register_model_architecture("transformer", "transformer_wmt_en_de_big_t2t")
def transformer_wmt_en_de_big_t2t(args): # -> None:
    ...

