"""
This type stub file was generated by pyright.
"""

from fairseq.models import FairseqEncoder, FairseqEncoderDecoderModel, FairseqIncrementalDecoder, register_model, register_model_architecture

logger = ...
def encoder_init(m): # -> None:
    ...

def Embedding(num_embeddings, embedding_dim): # -> Embedding:
    ...

class TTSTransformerEncoder(FairseqEncoder):
    def __init__(self, args, src_dict, embed_speaker) -> None:
        ...
    
    def forward(self, src_tokens, src_lengths=..., speaker=..., **kwargs): # -> dict[str, list[Any]]:
        ...
    


def decoder_init(m): # -> None:
    ...

class TTSTransformerDecoder(FairseqIncrementalDecoder):
    def __init__(self, args, src_dict, padding_idx=...) -> None:
        ...
    
    def extract_features(self, prev_outputs, encoder_out=..., incremental_state=..., target_lengths=..., speaker=..., **kwargs): # -> tuple[Any, dict[str, Tensor | list[Tensor | None] | None]]:
        ...
    
    def forward(self, prev_output_tokens, encoder_out=..., incremental_state=..., target_lengths=..., speaker=..., **kwargs): # -> tuple[Any, Any, dict[str, Tensor | list[Tensor | None] | Any | None]]:
        ...
    
    def get_normalized_probs(self, net_output, log_probs, sample): # -> Tensor:
        ...
    
    def buffered_future_mask(self, tensor): # -> Tensor:
        ...
    


@register_model("tts_transformer")
class TTSTransformerModel(FairseqEncoderDecoderModel):
    """
    Implementation for https://arxiv.org/pdf/1809.08895.pdf
    """
    @classmethod
    def hub_models(cls): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_pretrained(cls, model_name_or_path, checkpoint_file=..., data_name_or_path=..., config_yaml=..., vocoder: str = ..., fp16: bool = ..., **kwargs): # -> TTSHubInterface:
        ...
    
    @staticmethod
    def add_args(parser): # -> None:
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def build_model(cls, args, task): # -> Self:
        ...
    
    def forward_encoder(self, src_tokens, src_lengths, speaker=..., **kwargs):
        ...
    
    def set_num_updates(self, num_updates): # -> None:
        ...
    


@register_model_architecture("tts_transformer", "tts_transformer")
def base_architecture(args): # -> None:
    ...

