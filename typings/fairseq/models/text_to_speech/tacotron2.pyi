"""
This type stub file was generated by pyright.
"""

from torch import nn
from fairseq.models import FairseqEncoder, FairseqEncoderDecoderModel, FairseqIncrementalDecoder, register_model, register_model_architecture

logger = ...
def encoder_init(m): # -> None:
    ...

class Tacotron2Encoder(FairseqEncoder):
    def __init__(self, args, src_dict, embed_speaker) -> None:
        ...
    
    def forward(self, src_tokens, src_lengths=..., speaker=..., **kwargs): # -> dict[str, list[Any | Tensor] | Any]:
        ...
    


class Prenet(nn.Module):
    def __init__(self, in_dim, n_layers, n_units, dropout) -> None:
        ...
    
    def forward(self, x): # -> Tensor:
        ...
    


class Postnet(nn.Module):
    def __init__(self, in_dim, n_channels, kernel_size, n_layers, dropout) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


def decoder_init(m): # -> None:
    ...

class Tacotron2Decoder(FairseqIncrementalDecoder):
    def __init__(self, args, src_dict) -> None:
        ...
    
    def forward(self, prev_output_tokens, encoder_out=..., incremental_state=..., target_lengths=..., **kwargs): # -> tuple[Any, Any, dict[str, Any]]:
        ...
    


@register_model("tacotron_2")
class Tacotron2Model(FairseqEncoderDecoderModel):
    """
    Implementation for https://arxiv.org/pdf/1712.05884.pdf
    """
    @staticmethod
    def add_args(parser): # -> None:
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def build_model(cls, args, task): # -> Self:
        ...
    
    def forward_encoder(self, src_tokens, src_lengths, **kwargs):
        ...
    
    def set_num_updates(self, num_updates): # -> None:
        ...
    


@register_model_architecture("tacotron_2", "tacotron_2")
def base_architecture(args): # -> None:
    ...

