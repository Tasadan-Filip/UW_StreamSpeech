"""
This type stub file was generated by pyright.
"""

import torch
from torch import nn
from fairseq.models import FairseqEncoder, FairseqEncoderModel, register_model, register_model_architecture

logger = ...
def model_init(m): # -> None:
    ...

def Embedding(num_embeddings, embedding_dim, padding_idx=...): # -> Embedding:
    ...

class PositionwiseFeedForward(nn.Module):
    def __init__(self, in_dim, hidden_dim, kernel_size, dropout) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class FFTLayer(torch.nn.Module):
    def __init__(self, embed_dim, n_heads, hidden_dim, kernel_size, dropout, attention_dropout) -> None:
        ...
    
    def forward(self, x, padding_mask=...): # -> Any:
        ...
    


class LengthRegulator(nn.Module):
    def forward(self, x, durations): # -> tuple[Any, Any]:
        ...
    


class VariancePredictor(nn.Module):
    def __init__(self, args) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class VarianceAdaptor(nn.Module):
    def __init__(self, args) -> None:
        ...
    
    def get_pitch_emb(self, x, tgt=..., factor=...): # -> tuple[Any, Any]:
        ...
    
    def get_energy_emb(self, x, tgt=..., factor=...): # -> tuple[Any, Any]:
        ...
    
    def forward(self, x, padding_mask, durations=..., pitches=..., energies=..., d_factor=..., p_factor=..., e_factor=...): # -> tuple[Any, Any, Any, Any, Any]:
        ...
    


class FastSpeech2Encoder(FairseqEncoder):
    def __init__(self, args, src_dict, embed_speaker) -> None:
        ...
    
    def forward(self, src_tokens, src_lengths=..., speaker=..., durations=..., pitches=..., energies=..., **kwargs): # -> tuple[Any, Any | None, Any, Any, Any, Any]:
        ...
    


@register_model("fastspeech2")
class FastSpeech2Model(FairseqEncoderModel):
    """
    Implementation for https://arxiv.org/abs/2006.04558
    """
    NON_AUTOREGRESSIVE = ...
    @classmethod
    def hub_models(cls): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_pretrained(cls, model_name_or_path, checkpoint_file=..., data_name_or_path=..., config_yaml=..., vocoder: str = ..., fp16: bool = ..., **kwargs): # -> TTSHubInterface:
        ...
    
    @staticmethod
    def add_args(parser): # -> None:
        ...
    
    def __init__(self, encoder, args, src_dict) -> None:
        ...
    
    @classmethod
    def build_model(cls, args, task): # -> Self:
        ...
    
    def set_num_updates(self, num_updates): # -> None:
        ...
    
    def get_normalized_probs(self, net_output, log_probs, sample=...): # -> Tensor:
        ...
    


@register_model_architecture("fastspeech2", "fastspeech2")
def base_architecture(args): # -> None:
    ...

