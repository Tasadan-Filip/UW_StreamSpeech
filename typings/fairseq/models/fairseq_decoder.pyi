"""
This type stub file was generated by pyright.
"""

import torch.nn as nn
from typing import Dict, List, Optional, Tuple
from torch import Tensor

class FairseqDecoder(nn.Module):
    """Base class for decoders."""
    def __init__(self, dictionary) -> None:
        ...
    
    def forward(self, prev_output_tokens, encoder_out=..., **kwargs): # -> tuple[Any, Any]:
        """
        Args:
            prev_output_tokens (LongTensor): shifted output tokens of shape
                `(batch, tgt_len)`, for teacher forcing
            encoder_out (dict, optional): output from the encoder, used for
                encoder-side attention

        Returns:
            tuple:
                - the decoder's output of shape `(batch, tgt_len, vocab)`
                - a dictionary with any model-specific outputs
        """
        ...
    
    def extract_features(self, prev_output_tokens, encoder_out=..., **kwargs):
        """
        Returns:
            tuple:
                - the decoder's features of shape `(batch, tgt_len, embed_dim)`
                - a dictionary with any model-specific outputs
        """
        ...
    
    def output_layer(self, features, **kwargs):
        """
        Project features to the default output size, e.g., vocabulary size.

        Args:
            features (Tensor): features returned by *extract_features*.
        """
        ...
    
    def get_normalized_probs(self, net_output: Tuple[Tensor, Optional[Dict[str, List[Optional[Tensor]]]]], log_probs: bool, sample: Optional[Dict[str, Tensor]] = ...):
        """Get normalized probabilities (or log probs) from a net's output."""
        ...
    
    def get_normalized_probs_scriptable(self, net_output: Tuple[Tensor, Optional[Dict[str, List[Optional[Tensor]]]]], log_probs: bool, sample: Optional[Dict[str, Tensor]] = ...):
        """Get normalized probabilities (or log probs) from a net's output."""
        ...
    
    def max_positions(self): # -> float:
        """Maximum input length supported by the decoder."""
        ...
    
    def upgrade_state_dict_named(self, state_dict, name):
        """Upgrade old state dicts to work with newer code."""
        ...
    
    def prepare_for_onnx_export_(self): # -> None:
        ...
    


