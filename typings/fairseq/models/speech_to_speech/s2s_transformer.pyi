"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional
from torch import Tensor
from fairseq.models import FairseqEncoderDecoderModel, register_model, register_model_architecture
from fairseq.models.speech_to_text import S2TTransformerEncoder
from fairseq.models.transformer import TransformerDecoder

logger = ...
class S2STransformerEncoder(S2TTransformerEncoder):
    """Based on S2T transformer encoder, with support
    to incorporate target speaker embedding."""
    def __init__(self, args) -> None:
        ...
    
    def forward(self, src_tokens, src_lengths, tgt_speaker=..., return_all_hiddens=...): # -> dict[str, list[Any]]:
        ...
    


class TransformerUnitDecoder(TransformerDecoder):
    """Based on Transformer decoder, with support to decoding stacked units"""
    def __init__(self, args, dictionary, embed_tokens, no_encoder_attn=..., output_projection=...) -> None:
        ...
    
    def forward(self, prev_output_tokens, encoder_out: Optional[Dict[str, List[Tensor]]] = ..., incremental_state: Optional[Dict[str, Dict[str, Optional[Tensor]]]] = ..., features_only: bool = ..., full_context_alignment: bool = ..., alignment_layer: Optional[int] = ..., alignment_heads: Optional[int] = ..., src_lengths: Optional[Any] = ..., return_all_hiddens: bool = ...): # -> tuple[Any, dict[str, list[Tensor | None]]]:
        """
        Args:
            prev_output_tokens (LongTensor): previous decoder outputs of shape
                `(batch, tgt_len)`, for teacher forcing
            encoder_out (optional): output from the encoder, used for
                encoder-side attention, should be of size T x B x C
            incremental_state (dict): dictionary used for storing state during
                :ref:`Incremental decoding`
            features_only (bool, optional): only return features without
                applying output layer (default: False).
            full_context_alignment (bool, optional): don't apply
                auto-regressive mask to self-attention (default: False).

        Returns:
            tuple:
                - the decoder's output of shape `(batch, tgt_len, vocab)`
                - a dictionary with any model-specific outputs
        """
        ...
    
    def upgrade_state_dict_named(self, state_dict, name): # -> None:
        ...
    


class S2STransformerMultitaskModelBase(FairseqEncoderDecoderModel):
    @classmethod
    def build_encoder(cls, args): # -> S2STransformerEncoder | FairseqEncoder | FairseqDecoder:
        ...
    
    @classmethod
    def build_multitask_decoder(cls, args, tgt_dict, in_dim): # -> TransformerDecoder | CTCDecoder:
        ...
    
    @classmethod
    def build_model(cls, args, task): # -> Self:
        ...
    
    def forward_encoder(self, src_tokens, src_lengths, speaker=..., **kwargs):
        ...
    


@register_model("s2ut_transformer")
class S2UTTransformerModel(S2STransformerMultitaskModelBase):
    """
    Direct speech-to-speech translation model with S2T Transformer encoder + Transformer discrete unit decoder
    https://arxiv.org/abs/2107.05604
    """
    @staticmethod
    def add_args(parser): # -> None:
        ...
    
    @classmethod
    def build_decoder(cls, args, tgt_dict): # -> TransformerUnitDecoder:
        ...
    
    def forward(self, src_tokens, src_lengths, prev_output_tokens, tgt_speaker=..., return_all_hiddens=...):
        ...
    


@register_model("s2spect_transformer")
class S2SpecTTransformerModel(S2STransformerMultitaskModelBase):
    """
    Speech-to-spectrogram model with S2T Transformer encoder + TTS Transformer decoder
    """
    @staticmethod
    def add_args(parser): # -> None:
        ...
    
    @classmethod
    def build_decoder(cls, args): # -> TTSTransformerDecoder:
        ...
    
    def forward(self, src_tokens, src_lengths, prev_output_tokens, tgt_speaker=..., incremental_state=..., target_lengths=..., speaker=..., return_all_hiddens=...):
        ...
    


def base_multitask_text_transformer_decoder_arch(args): # -> None:
    ...

def base_s2st_transformer_encoder_architecture(args): # -> None:
    ...

@register_model_architecture(model_name="s2ut_transformer", arch_name="s2ut_transformer")
def s2ut_architecture_base(args): # -> None:
    ...

@register_model_architecture("s2ut_transformer", "s2ut_transformer_fisher")
def s2ut_architecture_fisher(args): # -> None:
    ...

@register_model_architecture(model_name="s2spect_transformer", arch_name="s2spect_transformer")
def s2spect_architecture_base(args): # -> None:
    ...

@register_model_architecture("s2spect_transformer", "s2spect_transformer_fisher")
def s2spect_architecture_fisher(args): # -> None:
    ...

