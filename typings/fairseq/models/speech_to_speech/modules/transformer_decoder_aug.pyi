"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional
from torch import Tensor
from fairseq.models.transformer.transformer_decoder_aug import AugTransformerDecoder

class AugTransformerUnitDecoder(AugTransformerDecoder):
    """Based on Transformer decoder, with support to decoding stacked units"""
    def __init__(self, args, dictionary, embed_tokens, no_encoder_attn=..., output_projection=...) -> None:
        ...
    
    def forward(self, prev_output_tokens, encoder_out: Optional[Dict[str, List[Tensor]]] = ..., encoder_out_aug: Optional[Dict[str, List[Tensor]]] = ..., incremental_state: Optional[Dict[str, Dict[str, Optional[Tensor]]]] = ..., features_only: bool = ..., full_context_alignment: bool = ..., alignment_layer: Optional[int] = ..., alignment_heads: Optional[int] = ..., src_lengths: Optional[Any] = ..., return_all_hiddens: bool = ...): # -> tuple[Any, dict[str, list[Tensor | None]]]:
        """
        Args:
            prev_output_tokens (LongTensor): previous decoder outputs of shape
                `(batch, tgt_len)`, for teacher forcing
            encoder_out (optional): output from the encoder, used for
                encoder-side attention, should be of size T x B x C
            incremental_state (dict): dictionary used for storing state during
                :ref:`Incremental decoding`
            features_only (bool, optional): only return features without
                applying output layer (default: False).
            full_context_alignment (bool, optional): don't apply
                auto-regressive mask to self-attention (default: False).

        Returns:
            tuple:
                - the decoder's output of shape `(batch, tgt_len, vocab)`
                - a dictionary with any model-specific outputs
        """
        ...
    
    def upgrade_state_dict_named(self, state_dict, name): # -> None:
        ...
    


