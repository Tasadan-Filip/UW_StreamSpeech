"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional
from fairseq.data.indexed_dataset import get_available_dataset_impl
from fairseq.dataclass import ChoiceEnum, FairseqDataclass
from fairseq.tasks import FairseqTask, register_task

EVAL_BLEU_ORDER = ...
logger = ...
def load_langpair_dataset(data_path, split, src, src_dict, tgt, tgt_dict, combine, dataset_impl, upsample_primary, left_pad_source, left_pad_target, max_source_positions, max_target_positions, prepend_bos=..., load_alignments=..., truncate_source=..., append_source_id=..., num_buckets=..., shuffle=..., pad_to_multiple=..., prepend_bos_src=...): # -> LanguagePairDataset:
    ...

@dataclass
class TranslationConfig(FairseqDataclass):
    data: Optional[str] = ...
    source_lang: Optional[str] = ...
    target_lang: Optional[str] = ...
    load_alignments: bool = ...
    left_pad_source: bool = ...
    left_pad_target: bool = ...
    max_source_positions: int = ...
    max_target_positions: int = ...
    upsample_primary: int = ...
    truncate_source: bool = ...
    num_batch_buckets: int = ...
    train_subset: str = ...
    dataset_impl: Optional[ChoiceEnum(get_available_dataset_impl())] = ...
    required_seq_len_multiple: int = ...
    eval_bleu: bool = ...
    eval_bleu_args: Optional[str] = ...
    eval_bleu_detok: str = ...
    eval_bleu_detok_args: Optional[str] = ...
    eval_tokenized_bleu: bool = ...
    eval_bleu_remove_bpe: Optional[str] = ...
    eval_bleu_print_samples: bool = ...


@register_task("translation", dataclass=TranslationConfig)
class TranslationTask(FairseqTask):
    """
    Translate from one (source) language to another (target) language.

    Args:
        src_dict (~fairseq.data.Dictionary): dictionary for the source language
        tgt_dict (~fairseq.data.Dictionary): dictionary for the target language

    .. note::

        The translation task is compatible with :mod:`fairseq-train`,
        :mod:`fairseq-generate` and :mod:`fairseq-interactive`.
    """
    cfg: TranslationConfig
    def __init__(self, cfg: TranslationConfig, src_dict, tgt_dict) -> None:
        ...
    
    @classmethod
    def setup_task(cls, cfg: TranslationConfig, **kwargs): # -> Self:
        """Setup the task (e.g., load dictionaries).

        Args:
            args (argparse.Namespace): parsed command-line arguments
        """
        ...
    
    def load_dataset(self, split, epoch=..., combine=..., **kwargs): # -> None:
        """Load a given dataset split.

        Args:
            split (str): name of the split (e.g., train, valid, test)
        """
        ...
    
    def build_dataset_for_inference(self, src_tokens, src_lengths, constraints=...): # -> LanguagePairDataset:
        ...
    
    def build_model(self, cfg, from_checkpoint=...):
        ...
    
    def valid_step(self, sample, model, criterion): # -> tuple[Any, Any, Any]:
        ...
    
    def reduce_metrics(self, logging_outputs, criterion): # -> None:
        ...
    
    def max_positions(self): # -> tuple[int, int]:
        """Return the max sentence length allowed by the task."""
        ...
    
    @property
    def source_dictionary(self):
        """Return the source :class:`~fairseq.data.Dictionary`."""
        ...
    
    @property
    def target_dictionary(self):
        """Return the target :class:`~fairseq.data.Dictionary`."""
        ...
    


