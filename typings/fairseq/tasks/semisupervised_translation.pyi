"""
This type stub file was generated by pyright.
"""

from . import register_task
from .multilingual_translation import MultilingualTranslationTask

logger = ...
def parse_lambda_config(x): # -> tuple[float, None] | tuple[float, list[tuple[int, float]]]:
    """
    Parse the configuration of lambda coefficient (for scheduling).
    x = "3"                  # lambda will be a constant equal to x
    x = "0:1,1000:0"         # lambda will start from 1 and linearly decrease
                             # to 0 during the first 1000 iterations
    x = "0:0,1000:0,2000:1"  # lambda will be equal to 0 for the first 1000
                             # iterations, then will linearly increase to 1 until iteration 2000
    """
    ...

@register_task("semisupervised_translation")
class SemisupervisedTranslationTask(MultilingualTranslationTask):
    """A task for training multiple translation models simultaneously.

    We iterate round-robin over batches from multiple language pairs, ordered
    according to the `--lang-pairs` argument.

    The training loop is roughly:

        for i in range(len(epoch)):
            for lang_pair in args.lang_pairs:
                batch = next_batch_for_lang_pair(lang_pair)
                loss = criterion(model_for_lang_pair(lang_pair), batch)
                loss.backward()
            optimizer.step()

    In practice, `next_batch_for_lang_pair` is abstracted in a FairseqDataset
    (e.g., `RoundRobinZipDatasets`) and `model_for_lang_pair` is a model that
    implements the `FairseqMultiModel` interface.

    During inference it is required to specify a single `--source-lang` and
    `--target-lang`, instead of `--lang-pairs`.
    """
    @staticmethod
    def add_args(parser): # -> None:
        """Add task-specific arguments to the parser."""
        ...
    
    def __init__(self, args, dicts, training) -> None:
        ...
    
    @classmethod
    def setup_task(cls, args, **kwargs): # -> Self:
        ...
    
    def load_dataset(self, split, epoch=..., **kwargs): # -> None:
        """Load a dataset split."""
        ...
    
    def build_model(self, args, from_checkpoint=...): # -> FairseqMultiModel:
        ...
    
    def train_step(self, sample, model, criterion, optimizer, update_num, ignore_grad=...): # -> tuple[float, float, dict[Any, Any]]:
        ...
    
    def update_step(self, num_updates): # -> None:
        ...
    


