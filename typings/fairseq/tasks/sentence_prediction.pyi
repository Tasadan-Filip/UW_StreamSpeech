"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional
from fairseq.tasks import FairseqDataclass, FairseqTask, register_task

logger = ...
SHORTEN_METHOD_CHOICES = ...
@dataclass
class SentencePredictionConfig(FairseqDataclass):
    data: str = ...
    num_classes: int = ...
    init_token: Optional[int] = ...
    separator_token: Optional[int] = ...
    no_shuffle: bool = ...
    shorten_method: SHORTEN_METHOD_CHOICES = ...
    shorten_data_split_list: str = ...
    add_prev_output_tokens: bool = ...
    max_positions: int = ...
    regression_target: bool = ...
    classification_head_name: str = ...
    seed: int = ...


@register_task("sentence_prediction", dataclass=SentencePredictionConfig)
class SentencePredictionTask(FairseqTask):
    """
    Sentence (or sentence pair) prediction (classification or regression) task.

    Args:
        dictionary (Dictionary): the dictionary for the input of the task
    """
    def __init__(self, cfg, data_dictionary, label_dictionary) -> None:
        ...
    
    @classmethod
    def load_dictionary(cls, filename): # -> Dictionary:
        """Load the dictionary from the filename

        Args:
            filename (str): the filename
        """
        ...
    
    @classmethod
    def setup_task(cls, cfg, **kwargs): # -> Self:
        ...
    
    def load_dataset(self, split, combine=..., **kwargs):
        """Load a given dataset split (e.g., train, valid, test)."""
        ...
    
    def build_model(self, cfg, from_checkpoint=...):
        ...
    
    def max_positions(self):
        ...
    
    @property
    def source_dictionary(self): # -> Any:
        ...
    
    @property
    def target_dictionary(self): # -> Any:
        ...
    
    @property
    def label_dictionary(self): # -> Any:
        ...
    


