"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from fairseq.dataclass import FairseqDataclass
from fairseq.tasks import FairseqTask, register_task
from .language_modeling import SAMPLE_BREAK_MODE_CHOICES, SHORTEN_METHOD_CHOICES

logger = ...
@dataclass
class MaskedLMConfig(FairseqDataclass):
    data: str = ...
    sample_break_mode: SAMPLE_BREAK_MODE_CHOICES = ...
    tokens_per_sample: int = ...
    mask_prob: float = ...
    leave_unmasked_prob: float = ...
    random_token_prob: float = ...
    freq_weighted_replacement: bool = ...
    mask_whole_words: bool = ...
    mask_multiple_length: int = ...
    mask_stdev: float = ...
    shorten_method: SHORTEN_METHOD_CHOICES = ...
    shorten_data_split_list: str = ...
    seed: int = ...
    include_target_tokens: bool = ...


@register_task("masked_lm", dataclass=MaskedLMConfig)
class MaskedLMTask(FairseqTask):
    cfg: MaskedLMConfig
    def __init__(self, cfg: MaskedLMConfig, dictionary) -> None:
        ...
    
    @classmethod
    def setup_task(cls, cfg: MaskedLMConfig, **kwargs): # -> Self:
        ...
    
    def load_dataset(self, split, epoch=..., combine=..., **kwargs): # -> None:
        """Load a given dataset split.

        Args:
            split (str): name of the split (e.g., train, valid, test)
        """
        ...
    
    def build_dataset_for_inference(self, src_tokens, src_lengths, sort=...): # -> SortDataset | NestedDictionaryDataset:
        ...
    
    @property
    def source_dictionary(self):
        ...
    
    @property
    def target_dictionary(self):
        ...
    


