"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional
from fairseq.dataclass import ChoiceEnum, FairseqDataclass
from fairseq.data.text_compressor import TextCompressionLevel
from . import FairseqTask, register_task

logger = ...
@dataclass
class InferredW2vConfig:
    mask_length: Optional[int] = ...
    mask_prob: Optional[float] = ...
    mask_selection: Optional[str] = ...
    mask_other: Optional[float] = ...
    no_mask_overlap: Optional[bool] = ...
    mask_min_space: Optional[int] = ...
    mask_channel_length: Optional[int] = ...
    mask_channel_prob: Optional[float] = ...
    mask_channel_selection: Optional[str] = ...
    mask_channel_other: Optional[float] = ...
    no_mask_channel_overlap: Optional[bool] = ...
    mask_channel_min_space: Optional[int] = ...
    conv_feature_layers: Optional[str] = ...
    encoder_embed_dim: Optional[int] = ...


@dataclass
class AudioPretrainingConfig(FairseqDataclass):
    data: str = ...
    labels: Optional[str] = ...
    binarized_dataset: bool = ...
    sample_rate: int = ...
    normalize: bool = ...
    enable_padding: bool = ...
    max_sample_size: Optional[int] = ...
    min_sample_size: Optional[int] = ...
    num_batch_buckets: int = ...
    precompute_mask_indices: bool = ...
    inferred_w2v_config: Optional[InferredW2vConfig] = ...
    tpu: bool = ...
    text_compression_level: ChoiceEnum([x.name for x in TextCompressionLevel]) = ...


@register_task("audio_pretraining", dataclass=AudioPretrainingConfig)
class AudioPretrainingTask(FairseqTask):
    """ """
    cfg: AudioPretrainingConfig
    @classmethod
    def setup_task(cls, cfg: AudioPretrainingConfig, **kwargs): # -> Self:
        """Setup the task (e.g., load dictionaries).

        Args:
            cfg (AudioPretrainingConfig): configuration of this task
        """
        ...
    
    def load_dataset(self, split: str, task_cfg: FairseqDataclass = ..., **kwargs): # -> None:
        ...
    
    @property
    def source_dictionary(self): # -> None:
        ...
    
    @property
    def target_dictionary(self): # -> None:
        ...
    
    def max_positions(self): # -> tuple[int, int]:
        """Maximum input length supported by the encoder."""
        ...
    
    def build_model(self, model_cfg: FairseqDataclass, from_checkpoint=...):
        ...
    


