"""
This type stub file was generated by pyright.
"""

import torch
from dataclasses import dataclass
from typing import List, Optional, Tuple
from fairseq.data import Dictionary
from fairseq.dataclass.configs import FairseqDataclass
from fairseq.tasks import register_task
from fairseq.tasks.fairseq_task import FairseqTask
from omegaconf import DictConfig

logger = ...
class UnitDictionary(Dictionary):
    """
    A fixed-sized Dictionary that operates on integer-valued tokens
    wth a trivial (identity) token <-> id mapping.
    Special symbols (bos, eos, ...) have ids above n_units.
    """
    def __init__(self, *, n_units, bos=..., pad=..., eos=..., unk=..., extra_special_symbols=..., clip=...) -> None:
        ...
    
    def encode_line(self, line, append_eos=..., prepend_bos=...) -> torch.IntTensor:
        ...
    


@dataclass
class SpeechUnitModelingConfig(FairseqDataclass):
    data: str = ...
    max_token_duration: int = ...
    tokens_per_sample: int = ...
    max_target_positions: int = ...
    ignore_duration_input: bool = ...
    discrete_duration: bool = ...
    ignore_f0_input: bool = ...
    discrete_f0: bool = ...
    log_f0: bool = ...
    normalize_f0_mean: bool = ...
    normalize_f0_std: bool = ...
    interpolate_f0: bool = ...
    stream_shifts: str = ...


@register_task("speech_unit_modeling", dataclass=SpeechUnitModelingConfig)
class SpeechUnitLanguageModelingTask(FairseqTask):
    def __init__(self, cfg: SpeechUnitModelingConfig) -> None:
        ...
    
    @property
    def source_dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def source_duration_dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def source_f0_dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def channel_names(self) -> List[str]:
        ...
    
    @property
    def channel_sizes(self) -> List[int]:
        ...
    
    @property
    def dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def target_dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def target_duration_dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def target_f0_dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def dictionaries(self) -> List[Dictionary]:
        ...
    
    @classmethod
    def setup_task(cls, cfg: SpeechUnitModelingConfig, **kwargs) -> SpeechUnitLanguageModelingTask:
        ...
    
    def load_dataset(self, split: str, **kwargs) -> None:
        ...
    
    def max_positions(self) -> Tuple[int, int]:
        ...
    
    def build_criterion(self, cfg: DictConfig): # -> Any | None:
        ...
    


