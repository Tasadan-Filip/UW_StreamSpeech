"""
This type stub file was generated by pyright.
"""

import torch
import torch.nn as nn
from fairseq.tasks import LegacyFairseqTask, register_task

logger = ...
class StackUnitSequenceGenerator(nn.Module):
    def __init__(self, tgt_dict, vocab_size) -> None:
        ...
    
    def pack_units(self, input: torch.Tensor, n_frames_per_step) -> torch.Tensor:
        ...
    
    @torch.no_grad()
    def generate(self, models, sample, **kwargs): # -> list[list[dict[str, Number | Tensor | Any]]]:
        ...
    


@register_task("speech_to_speech")
class SpeechToSpeechTask(LegacyFairseqTask):
    @classmethod
    def add_args(cls, parser): # -> None:
        ...
    
    def __init__(self, args, tgt_dict, infer_tgt_lang_id=...) -> None:
        ...
    
    @classmethod
    def setup_task(cls, args, **kwargs): # -> Self:
        ...
    
    def build_criterion(self, args): # -> Any | None:
        ...
    
    def load_dataset(self, split, epoch=..., combine=..., **kwargs): # -> None:
        ...
    
    @property
    def target_dictionary(self): # -> Any:
        ...
    
    @property
    def source_dictionary(self): # -> None:
        ...
    
    def max_positions(self): # -> tuple[Any, Any]:
        ...
    
    def build_model(self, args, from_checkpoint=...): # -> S2STransformerMultitaskModelBase:
        ...
    
    def build_generator(self, models, args, seq_gen_cls=..., extra_gen_cls_kwargs=...): # -> SequenceScorer | SequenceGenerator | SequenceGeneratorWithAlignment | StackUnitSequenceGenerator | AutoRegressiveSpeechGenerator | TeacherForcingAutoRegressiveSpeechGenerator:
        ...
    
    def train_step(self, sample, model, criterion, optimizer, update_num, ignore_grad=...): # -> tuple[Any, Any, Any]:
        ...
    
    def valid_step(self, sample, model, criterion): # -> tuple[Any, Any, Any]:
        ...
    
    def valid_step_with_inference(self, sample, model, generator): # -> tuple[Any | list[list[Any]], dict[str, float]]:
        ...
    
    def inference_step(self, generator, models, sample, prefix_tokens=..., constraints=...):
        ...
    


class DummyMultiTask(LegacyFairseqTask):
    def __init__(self, args, tgt_dict) -> None:
        ...
    
    @property
    def target_dictionary(self): # -> Any:
        ...
    
    def inference_step(self, generator, models, sample, prefix_tokens=..., constraints=...):
        ...
    
    def build_generator(self, models, args, seq_gen_cls=..., extra_gen_cls_kwargs=...):
        ...
    


