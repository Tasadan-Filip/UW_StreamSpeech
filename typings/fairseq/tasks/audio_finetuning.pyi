"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Optional
from fairseq.tasks.audio_pretraining import AudioPretrainingConfig, AudioPretrainingTask
from fairseq.dataclass import FairseqDataclass
from fairseq.dataclass.configs import GenerationConfig
from . import register_task

logger = ...
class LabelEncoder:
    def __init__(self, dictionary) -> None:
        ...
    
    def __call__(self, label):
        ...
    


def label_len_fn(label): # -> int:
    ...

@dataclass
class AudioFinetuningConfig(AudioPretrainingConfig):
    eval_wer: bool = ...
    eval_wer_config: GenerationConfig = ...
    eval_wer_tokenizer: Any = ...
    eval_wer_post_process: str = ...
    eval_bleu: bool = ...
    eval_bleu_detok: Optional[str] = ...
    eval_bleu_detok_args: str = ...
    eval_tokenized_bleu: bool = ...
    eval_bleu_remove_bpe: Optional[str] = ...
    eval_bleu_args: str = ...
    eval_bleu_print_samples: bool = ...
    autoregressive: bool = ...


@register_task("audio_finetuning", dataclass=AudioFinetuningConfig)
class AudioFinetuningTask(AudioPretrainingTask):
    """ """
    cfg: AudioFinetuningConfig
    def __init__(self, cfg: AudioFinetuningConfig) -> None:
        ...
    
    def load_target_dictionary(self): # -> Dictionary | None:
        ...
    
    def load_dataset(self, split: str, task_cfg: AudioFinetuningConfig = ..., **kwargs): # -> None:
        ...
    
    @property
    def target_dictionary(self):
        """Return the :class:`~fairseq.data.Dictionary` for the language
        model."""
        ...
    
    def valid_step(self, sample, model, criterion): # -> tuple[Any, Any, Any]:
        ...
    
    def build_model(self, model_cfg: FairseqDataclass, from_checkpoint=...):
        ...
    
    def reduce_metrics(self, logging_outputs, criterion): # -> None:
        ...
    


