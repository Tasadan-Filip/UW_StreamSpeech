"""
This type stub file was generated by pyright.
"""

from fairseq.tasks import register_task
from fairseq.tasks.speech_to_text import SpeechToTextTask

logger = ...
@register_task("text_to_speech")
class TextToSpeechTask(SpeechToTextTask):
    @staticmethod
    def add_args(parser): # -> None:
        ...
    
    def __init__(self, args, src_dict) -> None:
        ...
    
    def load_dataset(self, split, epoch=..., combine=..., **kwargs): # -> None:
        ...
    
    @property
    def target_dictionary(self): # -> None:
        ...
    
    @property
    def source_dictionary(self): # -> Any:
        ...
    
    def get_speaker_embeddings_path(self): # -> None:
        ...
    
    @classmethod
    def get_speaker_embeddings(cls, args): # -> Embedding | None:
        ...
    
    def build_model(self, cfg, from_checkpoint=...):
        ...
    
    def build_generator(self, models, cfg, vocoder=..., **unused): # -> NonAutoregressiveSpeechGenerator | AutoRegressiveSpeechGenerator | TeacherForcingAutoRegressiveSpeechGenerator:
        ...
    
    def build_default_vocoder(self): # -> CodeHiFiGANVocoder | HiFiGANVocoder | GriffinLimVocoder:
        ...
    
    def valid_step(self, sample, model, criterion): # -> tuple[Any, Any, Any]:
        ...
    
    def valid_step_with_inference(self, sample, model, generator): # -> tuple[Any, dict[str, float]]:
        ...
    
    def log_tensorboard(self, sample, hypos, num_updates, is_na_model=...): # -> None:
        ...
    


def save_figure_to_numpy(fig): # -> ndarray[Any, dtype[unsignedinteger[_8Bit]]]:
    ...

DEFAULT_V_MIN = ...
def plot_tts_output(data_2d, title_2d, data_1d, title_1d, figsize=..., v_min=..., v_max=..., ret_np=..., suptitle=...): # -> ndarray[Any, dtype[unsignedinteger[_8Bit]]] | None:
    ...

def antidiag_indices(offset, min_i=..., max_i=..., min_j=..., max_j=...): # -> Tensor:
    """
    for a (3, 4) matrix with min_i=1, max_i=3, min_j=1, max_j=4, outputs

    offset=2 (1, 1),
    offset=3 (2, 1), (1, 2)
    offset=4 (2, 2), (1, 3)
    offset=5 (2, 3)

    constraints:
        i + j = offset
        min_j <= j < max_j
        min_i <= offset - j < max_i
    """
    ...

def batch_dynamic_time_warping(distance, shapes=...): # -> tuple[Tensor, Tensor, Tensor]:
    """full batched DTW without any constraints

    distance:  (batchsize, max_M, max_N) matrix
    shapes: (batchsize,) vector specifying (M, N) for each entry
    """
    ...

def compute_l2_dist(x1, x2): # -> Tensor:
    """compute an (m, n) L2 distance matrix from (m, d) and (n, d) matrices"""
    ...

def compute_rms_dist(x1, x2):
    ...

def get_divisor(pathmap, normalize_type): # -> Literal[1]:
    ...

def batch_compute_distortion(y1, y2, sr, feat_fn, dist_fn, normalize_type): # -> list[Any]:
    ...

def batch_mel_cepstral_distortion(y1, y2, sr, normalize_type=..., mfcc_fn=...): # -> list[Any]:
    """
    https://arxiv.org/pdf/2011.03568.pdf

    The root mean squared error computed on 13-dimensional MFCC using DTW for
    alignment. MFCC features are computed from an 80-channel log-mel
    spectrogram using a 50ms Hann window and hop of 12.5ms.

    y1: list of waveforms
    y2: list of waveforms
    sr: sampling rate
    """
    ...

