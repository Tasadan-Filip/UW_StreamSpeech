"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import List, Optional, Tuple
from dataclasses import dataclass
from fairseq.data import Dictionary
from fairseq.dataclass.configs import FairseqDataclass
from fairseq.tasks import register_task
from fairseq.tasks.fairseq_task import FairseqTask

logger = ...
class LabelEncoder:
    def __init__(self, dictionary: Dictionary) -> None:
        ...
    
    def __call__(self, label: str) -> List[str]:
        ...
    


@dataclass
class HubertPretrainingConfig(FairseqDataclass):
    data: str = ...
    fine_tuning: bool = ...
    labels: List[str] = ...
    label_dir: Optional[str] = ...
    label_rate: float = ...
    sample_rate: int = ...
    normalize: bool = ...
    enable_padding: bool = ...
    max_keep_size: Optional[int] = ...
    max_sample_size: Optional[int] = ...
    min_sample_size: Optional[int] = ...
    single_target: Optional[bool] = ...
    random_crop: Optional[bool] = ...
    pad_audio: Optional[bool] = ...


@register_task("hubert_pretraining", dataclass=HubertPretrainingConfig)
class HubertPretrainingTask(FairseqTask):
    cfg: HubertPretrainingConfig
    def __init__(self, cfg: HubertPretrainingConfig) -> None:
        ...
    
    @property
    def source_dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def target_dictionary(self) -> Optional[Dictionary]:
        ...
    
    @property
    def dictionaries(self) -> List[Dictionary]:
        ...
    
    @classmethod
    def setup_task(cls, cfg: HubertPretrainingConfig, **kwargs) -> HubertPretrainingTask:
        ...
    
    def load_dictionaries(self): # -> Dictionary | list[Dictionary]:
        ...
    
    def get_label_dir(self) -> str:
        ...
    
    def load_dataset(self, split: str, **kwargs) -> None:
        ...
    
    def max_positions(self) -> Tuple[int, int]:
        ...
    
    def filter_indices_by_size(self, indices: np.array, *args, **kwargs) -> np.array:
        ...
    


