"""
This type stub file was generated by pyright.
"""

import torch

DecoderOut = ...
class IterativeRefinementGenerator:
    def __init__(self, tgt_dict, models=..., eos_penalty=..., max_iter=..., max_ratio=..., beam_size=..., decoding_format=..., retain_dropout=..., adaptive=..., retain_history=..., reranking=...) -> None:
        """
        Generates translations based on iterative refinement.

        Args:
            tgt_dict: target dictionary
            eos_penalty: if > 0.0, it penalized early-stopping in decoding
            max_iter: maximum number of refinement iterations
            max_ratio: generate sequences of maximum length ax, where x is the source length
            decoding_format: decoding mode in {'unigram', 'ensemble', 'vote', 'dp', 'bs'}
            retain_dropout: retaining dropout in the inference
            adaptive: decoding with early stop
        """
        ...
    
    def generate_batched_itr(self, data_itr, maxlen_a=..., maxlen_b=..., cuda=..., timer=..., prefix_size=...): # -> Generator[tuple[Any, Any, Any, list[Any]], Any, None]:
        """Iterate over a batched dataset and yield individual translations.

        Args:
            maxlen_a/b: generate sequences of maximum length ax + b,
                where x is the source sentence length.
            cuda: use GPU for generation
            timer: StopwatchMeter for timing generations.
        """
        ...
    
    @torch.no_grad()
    def generate(self, models, sample, prefix_tokens=..., constraints=...): # -> list[list[Any]]:
        ...
    
    def rerank(self, reranker, finalized, encoder_input, beam_size):
        ...
    


